// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/chat/chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fchat_2fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fchat_2fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fchat_2fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fchat_2fchat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fchat_2fchat_2eproto;
namespace chat {
class JoinReq;
class JoinReqDefaultTypeInternal;
extern JoinReqDefaultTypeInternal _JoinReq_default_instance_;
class Payload;
class PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class PollReq;
class PollReqDefaultTypeInternal;
extern PollReqDefaultTypeInternal _PollReq_default_instance_;
class PollUpdate;
class PollUpdateDefaultTypeInternal;
extern PollUpdateDefaultTypeInternal _PollUpdate_default_instance_;
class Receipt;
class ReceiptDefaultTypeInternal;
extern ReceiptDefaultTypeInternal _Receipt_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::JoinReq* Arena::CreateMaybeMessage<::chat::JoinReq>(Arena*);
template<> ::chat::Payload* Arena::CreateMaybeMessage<::chat::Payload>(Arena*);
template<> ::chat::PollReq* Arena::CreateMaybeMessage<::chat::PollReq>(Arena*);
template<> ::chat::PollUpdate* Arena::CreateMaybeMessage<::chat::PollUpdate>(Arena*);
template<> ::chat::Receipt* Arena::CreateMaybeMessage<::chat::Receipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum Payload_Kind : int {
  Payload_Kind_CONTROL = 0,
  Payload_Kind_TEXT = 1,
  Payload_Kind_IMAGE = 2,
  Payload_Kind_Payload_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Payload_Kind_Payload_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Payload_Kind_IsValid(int value);
constexpr Payload_Kind Payload_Kind_Kind_MIN = Payload_Kind_CONTROL;
constexpr Payload_Kind Payload_Kind_Kind_MAX = Payload_Kind_IMAGE;
constexpr int Payload_Kind_Kind_ARRAYSIZE = Payload_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Payload_Kind_descriptor();
template<typename T>
inline const std::string& Payload_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Payload_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Payload_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Payload_Kind_descriptor(), enum_t_value);
}
inline bool Payload_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Payload_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Payload_Kind>(
    Payload_Kind_descriptor(), name, value);
}
enum Receipt_Status : int {
  Receipt_Status_OK = 0,
  Receipt_Status_ERROR = 1,
  Receipt_Status_WAITING = 2,
  Receipt_Status_REJECTED = 3,
  Receipt_Status_Receipt_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Receipt_Status_Receipt_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Receipt_Status_IsValid(int value);
constexpr Receipt_Status Receipt_Status_Status_MIN = Receipt_Status_OK;
constexpr Receipt_Status Receipt_Status_Status_MAX = Receipt_Status_REJECTED;
constexpr int Receipt_Status_Status_ARRAYSIZE = Receipt_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Receipt_Status_descriptor();
template<typename T>
inline const std::string& Receipt_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Receipt_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Receipt_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Receipt_Status_descriptor(), enum_t_value);
}
inline bool Receipt_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Receipt_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Receipt_Status>(
    Receipt_Status_descriptor(), name, value);
}
// ===================================================================

class JoinReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.JoinReq) */ {
 public:
  inline JoinReq() : JoinReq(nullptr) {}
  virtual ~JoinReq();

  JoinReq(const JoinReq& from);
  JoinReq(JoinReq&& from) noexcept
    : JoinReq() {
    *this = ::std::move(from);
  }

  inline JoinReq& operator=(const JoinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinReq& operator=(JoinReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinReq& default_instance();

  static inline const JoinReq* internal_default_instance() {
    return reinterpret_cast<const JoinReq*>(
               &_JoinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinReq& a, JoinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinReq* New() const final {
    return CreateMaybeMessage<JoinReq>(nullptr);
  }

  JoinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinReq& from);
  void MergeFrom(const JoinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.JoinReq";
  }
  protected:
  explicit JoinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchat_2fchat_2eproto);
    return ::descriptor_table_pb_2fchat_2fchat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.JoinReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class Payload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  virtual ~Payload();

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payload& default_instance();

  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return CreateMaybeMessage<Payload>(nullptr);
  }

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchat_2fchat_2eproto);
    return ::descriptor_table_pb_2fchat_2fchat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Payload_Kind Kind;
  static constexpr Kind CONTROL =
    Payload_Kind_CONTROL;
  static constexpr Kind TEXT =
    Payload_Kind_TEXT;
  static constexpr Kind IMAGE =
    Payload_Kind_IMAGE;
  static inline bool Kind_IsValid(int value) {
    return Payload_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    Payload_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    Payload_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    Payload_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return Payload_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return Payload_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return Payload_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDstFieldNumber = 2,
    kDataFieldNumber = 3,
    kKindFieldNumber = 4,
  };
  // string src = 1;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // string dst = 2;
  void clear_dst();
  const std::string& dst() const;
  void set_dst(const std::string& value);
  void set_dst(std::string&& value);
  void set_dst(const char* value);
  void set_dst(const char* value, size_t size);
  std::string* mutable_dst();
  std::string* release_dst();
  void set_allocated_dst(std::string* dst);
  private:
  const std::string& _internal_dst() const;
  void _internal_set_dst(const std::string& value);
  std::string* _internal_mutable_dst();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .chat.Payload.Kind kind = 4;
  void clear_kind();
  ::chat::Payload_Kind kind() const;
  void set_kind(::chat::Payload_Kind value);
  private:
  ::chat::Payload_Kind _internal_kind() const;
  void _internal_set_kind(::chat::Payload_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:chat.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class Receipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Receipt) */ {
 public:
  inline Receipt() : Receipt(nullptr) {}
  virtual ~Receipt();

  Receipt(const Receipt& from);
  Receipt(Receipt&& from) noexcept
    : Receipt() {
    *this = ::std::move(from);
  }

  inline Receipt& operator=(const Receipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Receipt& operator=(Receipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Receipt& default_instance();

  static inline const Receipt* internal_default_instance() {
    return reinterpret_cast<const Receipt*>(
               &_Receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Receipt& a, Receipt& b) {
    a.Swap(&b);
  }
  inline void Swap(Receipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Receipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Receipt* New() const final {
    return CreateMaybeMessage<Receipt>(nullptr);
  }

  Receipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Receipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Receipt& from);
  void MergeFrom(const Receipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Receipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Receipt";
  }
  protected:
  explicit Receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchat_2fchat_2eproto);
    return ::descriptor_table_pb_2fchat_2fchat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Receipt_Status Status;
  static constexpr Status OK =
    Receipt_Status_OK;
  static constexpr Status ERROR =
    Receipt_Status_ERROR;
  static constexpr Status WAITING =
    Receipt_Status_WAITING;
  static constexpr Status REJECTED =
    Receipt_Status_REJECTED;
  static inline bool Status_IsValid(int value) {
    return Receipt_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Receipt_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Receipt_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Receipt_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Receipt_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Receipt_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Receipt_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .chat.Receipt.Status status = 1;
  void clear_status();
  ::chat::Receipt_Status status() const;
  void set_status(::chat::Receipt_Status value);
  private:
  ::chat::Receipt_Status _internal_status() const;
  void _internal_set_status(::chat::Receipt_Status value);
  public:

  // @@protoc_insertion_point(class_scope:chat.Receipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class PollReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.PollReq) */ {
 public:
  inline PollReq() : PollReq(nullptr) {}
  virtual ~PollReq();

  PollReq(const PollReq& from);
  PollReq(PollReq&& from) noexcept
    : PollReq() {
    *this = ::std::move(from);
  }

  inline PollReq& operator=(const PollReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollReq& operator=(PollReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PollReq& default_instance();

  static inline const PollReq* internal_default_instance() {
    return reinterpret_cast<const PollReq*>(
               &_PollReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PollReq& a, PollReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PollReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollReq* New() const final {
    return CreateMaybeMessage<PollReq>(nullptr);
  }

  PollReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PollReq& from);
  void MergeFrom(const PollReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.PollReq";
  }
  protected:
  explicit PollReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchat_2fchat_2eproto);
    return ::descriptor_table_pb_2fchat_2fchat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.PollReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class PollUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.PollUpdate) */ {
 public:
  inline PollUpdate() : PollUpdate(nullptr) {}
  virtual ~PollUpdate();

  PollUpdate(const PollUpdate& from);
  PollUpdate(PollUpdate&& from) noexcept
    : PollUpdate() {
    *this = ::std::move(from);
  }

  inline PollUpdate& operator=(const PollUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollUpdate& operator=(PollUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PollUpdate& default_instance();

  static inline const PollUpdate* internal_default_instance() {
    return reinterpret_cast<const PollUpdate*>(
               &_PollUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PollUpdate& a, PollUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PollUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollUpdate* New() const final {
    return CreateMaybeMessage<PollUpdate>(nullptr);
  }

  PollUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PollUpdate& from);
  void MergeFrom(const PollUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.PollUpdate";
  }
  protected:
  explicit PollUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchat_2fchat_2eproto);
    return ::descriptor_table_pb_2fchat_2fchat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomingFieldNumber = 1,
    kOnlineFieldNumber = 3,
    kUnmatchedFieldNumber = 4,
  };
  // repeated .chat.Payload incoming = 1;
  int incoming_size() const;
  private:
  int _internal_incoming_size() const;
  public:
  void clear_incoming();
  ::chat::Payload* mutable_incoming(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::Payload >*
      mutable_incoming();
  private:
  const ::chat::Payload& _internal_incoming(int index) const;
  ::chat::Payload* _internal_add_incoming();
  public:
  const ::chat::Payload& incoming(int index) const;
  ::chat::Payload* add_incoming();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::Payload >&
      incoming() const;

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unmatched = 4;
  void clear_unmatched();
  ::PROTOBUF_NAMESPACE_ID::int32 unmatched() const;
  void set_unmatched(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unmatched() const;
  void _internal_set_unmatched(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.PollUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::Payload > incoming_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  ::PROTOBUF_NAMESPACE_ID::int32 unmatched_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchat_2fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinReq

// -------------------------------------------------------------------

// Payload

// string src = 1;
inline void Payload::clear_src() {
  src_.ClearToEmpty();
}
inline const std::string& Payload::src() const {
  // @@protoc_insertion_point(field_get:chat.Payload.src)
  return _internal_src();
}
inline void Payload::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:chat.Payload.src)
}
inline std::string* Payload::mutable_src() {
  // @@protoc_insertion_point(field_mutable:chat.Payload.src)
  return _internal_mutable_src();
}
inline const std::string& Payload::_internal_src() const {
  return src_.Get();
}
inline void Payload::_internal_set_src(const std::string& value) {
  
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Payload::set_src(std::string&& value) {
  
  src_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.Payload.src)
}
inline void Payload::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.Payload.src)
}
inline void Payload::set_src(const char* value,
    size_t size) {
  
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.Payload.src)
}
inline std::string* Payload::_internal_mutable_src() {
  
  return src_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Payload::release_src() {
  // @@protoc_insertion_point(field_release:chat.Payload.src)
  return src_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Payload::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    
  } else {
    
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.Payload.src)
}

// string dst = 2;
inline void Payload::clear_dst() {
  dst_.ClearToEmpty();
}
inline const std::string& Payload::dst() const {
  // @@protoc_insertion_point(field_get:chat.Payload.dst)
  return _internal_dst();
}
inline void Payload::set_dst(const std::string& value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:chat.Payload.dst)
}
inline std::string* Payload::mutable_dst() {
  // @@protoc_insertion_point(field_mutable:chat.Payload.dst)
  return _internal_mutable_dst();
}
inline const std::string& Payload::_internal_dst() const {
  return dst_.Get();
}
inline void Payload::_internal_set_dst(const std::string& value) {
  
  dst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Payload::set_dst(std::string&& value) {
  
  dst_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.Payload.dst)
}
inline void Payload::set_dst(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.Payload.dst)
}
inline void Payload::set_dst(const char* value,
    size_t size) {
  
  dst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.Payload.dst)
}
inline std::string* Payload::_internal_mutable_dst() {
  
  return dst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Payload::release_dst() {
  // @@protoc_insertion_point(field_release:chat.Payload.dst)
  return dst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Payload::set_allocated_dst(std::string* dst) {
  if (dst != nullptr) {
    
  } else {
    
  }
  dst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.Payload.dst)
}

// string data = 3;
inline void Payload::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Payload::data() const {
  // @@protoc_insertion_point(field_get:chat.Payload.data)
  return _internal_data();
}
inline void Payload::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:chat.Payload.data)
}
inline std::string* Payload::mutable_data() {
  // @@protoc_insertion_point(field_mutable:chat.Payload.data)
  return _internal_mutable_data();
}
inline const std::string& Payload::_internal_data() const {
  return data_.Get();
}
inline void Payload::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Payload::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.Payload.data)
}
inline void Payload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.Payload.data)
}
inline void Payload::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.Payload.data)
}
inline std::string* Payload::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Payload::release_data() {
  // @@protoc_insertion_point(field_release:chat.Payload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Payload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.Payload.data)
}

// .chat.Payload.Kind kind = 4;
inline void Payload::clear_kind() {
  kind_ = 0;
}
inline ::chat::Payload_Kind Payload::_internal_kind() const {
  return static_cast< ::chat::Payload_Kind >(kind_);
}
inline ::chat::Payload_Kind Payload::kind() const {
  // @@protoc_insertion_point(field_get:chat.Payload.kind)
  return _internal_kind();
}
inline void Payload::_internal_set_kind(::chat::Payload_Kind value) {
  
  kind_ = value;
}
inline void Payload::set_kind(::chat::Payload_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:chat.Payload.kind)
}

// -------------------------------------------------------------------

// Receipt

// .chat.Receipt.Status status = 1;
inline void Receipt::clear_status() {
  status_ = 0;
}
inline ::chat::Receipt_Status Receipt::_internal_status() const {
  return static_cast< ::chat::Receipt_Status >(status_);
}
inline ::chat::Receipt_Status Receipt::status() const {
  // @@protoc_insertion_point(field_get:chat.Receipt.status)
  return _internal_status();
}
inline void Receipt::_internal_set_status(::chat::Receipt_Status value) {
  
  status_ = value;
}
inline void Receipt::set_status(::chat::Receipt_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.Receipt.status)
}

// string msg = 2;
inline void Receipt::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Receipt::msg() const {
  // @@protoc_insertion_point(field_get:chat.Receipt.msg)
  return _internal_msg();
}
inline void Receipt::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:chat.Receipt.msg)
}
inline std::string* Receipt::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:chat.Receipt.msg)
  return _internal_mutable_msg();
}
inline const std::string& Receipt::_internal_msg() const {
  return msg_.Get();
}
inline void Receipt::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Receipt::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.Receipt.msg)
}
inline void Receipt::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.Receipt.msg)
}
inline void Receipt::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.Receipt.msg)
}
inline std::string* Receipt::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Receipt::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Receipt.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Receipt::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.Receipt.msg)
}

// -------------------------------------------------------------------

// PollReq

// -------------------------------------------------------------------

// PollUpdate

// repeated .chat.Payload incoming = 1;
inline int PollUpdate::_internal_incoming_size() const {
  return incoming_.size();
}
inline int PollUpdate::incoming_size() const {
  return _internal_incoming_size();
}
inline void PollUpdate::clear_incoming() {
  incoming_.Clear();
}
inline ::chat::Payload* PollUpdate::mutable_incoming(int index) {
  // @@protoc_insertion_point(field_mutable:chat.PollUpdate.incoming)
  return incoming_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::Payload >*
PollUpdate::mutable_incoming() {
  // @@protoc_insertion_point(field_mutable_list:chat.PollUpdate.incoming)
  return &incoming_;
}
inline const ::chat::Payload& PollUpdate::_internal_incoming(int index) const {
  return incoming_.Get(index);
}
inline const ::chat::Payload& PollUpdate::incoming(int index) const {
  // @@protoc_insertion_point(field_get:chat.PollUpdate.incoming)
  return _internal_incoming(index);
}
inline ::chat::Payload* PollUpdate::_internal_add_incoming() {
  return incoming_.Add();
}
inline ::chat::Payload* PollUpdate::add_incoming() {
  // @@protoc_insertion_point(field_add:chat.PollUpdate.incoming)
  return _internal_add_incoming();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::Payload >&
PollUpdate::incoming() const {
  // @@protoc_insertion_point(field_list:chat.PollUpdate.incoming)
  return incoming_;
}

// int32 online = 3;
inline void PollUpdate::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PollUpdate::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PollUpdate::online() const {
  // @@protoc_insertion_point(field_get:chat.PollUpdate.online)
  return _internal_online();
}
inline void PollUpdate::_internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
}
inline void PollUpdate::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:chat.PollUpdate.online)
}

// int32 unmatched = 4;
inline void PollUpdate::clear_unmatched() {
  unmatched_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PollUpdate::_internal_unmatched() const {
  return unmatched_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PollUpdate::unmatched() const {
  // @@protoc_insertion_point(field_get:chat.PollUpdate.unmatched)
  return _internal_unmatched();
}
inline void PollUpdate::_internal_set_unmatched(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unmatched_ = value;
}
inline void PollUpdate::set_unmatched(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unmatched(value);
  // @@protoc_insertion_point(field_set:chat.PollUpdate.unmatched)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::Payload_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Payload_Kind>() {
  return ::chat::Payload_Kind_descriptor();
}
template <> struct is_proto_enum< ::chat::Receipt_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Receipt_Status>() {
  return ::chat::Receipt_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fchat_2fchat_2eproto
