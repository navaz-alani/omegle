// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/auth/auth.proto

#include "pb/auth/auth.pb.h"
#include "pb/auth/auth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace auth {

static const char* Auth_method_names[] = {
  "/auth.Auth/GetCert",
  "/auth.Auth/VerifCert",
  "/auth.Auth/RenewCert",
};

std::unique_ptr< Auth::Stub> Auth::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Auth::Stub> stub(new Auth::Stub(channel));
  return stub;
}

Auth::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCert_(Auth_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifCert_(Auth_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewCert_(Auth_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Auth::Stub::GetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::auth::Cert* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCert_, context, request, response);
}

void Auth::Stub::experimental_async::GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCert_, context, request, response, std::move(f));
}

void Auth::Stub::experimental_async::GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auth::Cert>* Auth::Stub::PrepareAsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::Cert>::Create(channel_.get(), cq, rpcmethod_GetCert_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::auth::Cert>* Auth::Stub::AsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Auth::Stub::VerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::CertStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifCert_, context, request, response);
}

void Auth::Stub::experimental_async::VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifCert_, context, request, response, std::move(f));
}

void Auth::Stub::experimental_async::VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifCert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auth::CertStatus>* Auth::Stub::PrepareAsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::CertStatus>::Create(channel_.get(), cq, rpcmethod_VerifCert_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::auth::CertStatus>* Auth::Stub::AsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifCertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Auth::Stub::RenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::Cert* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RenewCert_, context, request, response);
}

void Auth::Stub::experimental_async::RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenewCert_, context, request, response, std::move(f));
}

void Auth::Stub::experimental_async::RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenewCert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::auth::Cert>* Auth::Stub::PrepareAsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::Cert>::Create(channel_.get(), cq, rpcmethod_RenewCert_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::auth::Cert>* Auth::Stub::AsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewCertRaw(context, request, cq);
  result->StartCall();
  return result;
}

Auth::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::Request, ::auth::Cert>(
          [](Auth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::auth::Request* req,
             ::auth::Cert* resp) {
               return service->GetCert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::Cert, ::auth::CertStatus>(
          [](Auth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::auth::Cert* req,
             ::auth::CertStatus* resp) {
               return service->VerifCert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::Cert, ::auth::Cert>(
          [](Auth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::auth::Cert* req,
             ::auth::Cert* resp) {
               return service->RenewCert(ctx, req, resp);
             }, this)));
}

Auth::Service::~Service() {
}

::grpc::Status Auth::Service::GetCert(::grpc::ServerContext* context, const ::auth::Request* request, ::auth::Cert* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Auth::Service::VerifCert(::grpc::ServerContext* context, const ::auth::Cert* request, ::auth::CertStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Auth::Service::RenewCert(::grpc::ServerContext* context, const ::auth::Cert* request, ::auth::Cert* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace auth

