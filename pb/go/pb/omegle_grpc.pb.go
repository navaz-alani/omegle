// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OmegleClient is the client API for Omegle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmegleClient interface {
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (Omegle_JoinClient, error)
	Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatResp, error)
	Send(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*SendReceipt, error)
	GetCommunityStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*CommunityStats, error)
}

type omegleClient struct {
	cc grpc.ClientConnInterface
}

func NewOmegleClient(cc grpc.ClientConnInterface) OmegleClient {
	return &omegleClient{cc}
}

func (c *omegleClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (Omegle_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Omegle_serviceDesc.Streams[0], "/pb.Omegle/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &omegleJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Omegle_JoinClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type omegleJoinClient struct {
	grpc.ClientStream
}

func (x *omegleJoinClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *omegleClient) Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatResp, error) {
	out := new(ChatResp)
	err := c.cc.Invoke(ctx, "/pb.Omegle/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omegleClient) Send(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*SendReceipt, error) {
	out := new(SendReceipt)
	err := c.cc.Invoke(ctx, "/pb.Omegle/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omegleClient) GetCommunityStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*CommunityStats, error) {
	out := new(CommunityStats)
	err := c.cc.Invoke(ctx, "/pb.Omegle/GetCommunityStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmegleServer is the server API for Omegle service.
// All implementations must embed UnimplementedOmegleServer
// for forward compatibility
type OmegleServer interface {
	Join(*JoinReq, Omegle_JoinServer) error
	Chat(context.Context, *ChatReq) (*ChatResp, error)
	Send(context.Context, *Payload) (*SendReceipt, error)
	GetCommunityStats(context.Context, *StatsReq) (*CommunityStats, error)
	mustEmbedUnimplementedOmegleServer()
}

// UnimplementedOmegleServer must be embedded to have forward compatible implementations.
type UnimplementedOmegleServer struct {
}

func (UnimplementedOmegleServer) Join(*JoinReq, Omegle_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedOmegleServer) Chat(context.Context, *ChatReq) (*ChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedOmegleServer) Send(context.Context, *Payload) (*SendReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedOmegleServer) GetCommunityStats(context.Context, *StatsReq) (*CommunityStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityStats not implemented")
}
func (UnimplementedOmegleServer) mustEmbedUnimplementedOmegleServer() {}

// UnsafeOmegleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmegleServer will
// result in compilation errors.
type UnsafeOmegleServer interface {
	mustEmbedUnimplementedOmegleServer()
}

func RegisterOmegleServer(s grpc.ServiceRegistrar, srv OmegleServer) {
	s.RegisterService(&_Omegle_serviceDesc, srv)
}

func _Omegle_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OmegleServer).Join(m, &omegleJoinServer{stream})
}

type Omegle_JoinServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type omegleJoinServer struct {
	grpc.ServerStream
}

func (x *omegleJoinServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _Omegle_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmegleServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Omegle/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmegleServer).Chat(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omegle_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmegleServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Omegle/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmegleServer).Send(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omegle_GetCommunityStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmegleServer).GetCommunityStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Omegle/GetCommunityStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmegleServer).GetCommunityStats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Omegle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Omegle",
	HandlerType: (*OmegleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Omegle_Chat_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Omegle_Send_Handler,
		},
		{
			MethodName: "GetCommunityStats",
			Handler:    _Omegle_GetCommunityStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Omegle_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/omegle.proto",
}
