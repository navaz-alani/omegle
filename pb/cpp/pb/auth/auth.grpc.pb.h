// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/auth/auth.proto
#ifndef GRPC_pb_2fauth_2fauth_2eproto__INCLUDED
#define GRPC_pb_2fauth_2fauth_2eproto__INCLUDED

#include "pb/auth/auth.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace auth {

class Auth final {
 public:
  static constexpr char const* service_full_name() {
    return "auth.Auth";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::auth::Cert* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>> AsyncGetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>>(AsyncGetCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>> PrepareAsyncGetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>>(PrepareAsyncGetCertRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::CertStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>> AsyncVerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>>(AsyncVerifCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>> PrepareAsyncVerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>>(PrepareAsyncVerifCertRaw(context, request, cq));
    }
    virtual ::grpc::Status RenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::Cert* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>> AsyncRenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>>(AsyncRenewCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>> PrepareAsyncRenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>>(PrepareAsyncRenewCertRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>* AsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>* PrepareAsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>* AsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::CertStatus>* PrepareAsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>* AsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::Cert>* PrepareAsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::auth::Cert* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>> AsyncGetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>>(AsyncGetCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>> PrepareAsyncGetCert(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>>(PrepareAsyncGetCertRaw(context, request, cq));
    }
    ::grpc::Status VerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::CertStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>> AsyncVerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>>(AsyncVerifCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>> PrepareAsyncVerifCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>>(PrepareAsyncVerifCertRaw(context, request, cq));
    }
    ::grpc::Status RenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::auth::Cert* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>> AsyncRenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>>(AsyncRenewCertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>> PrepareAsyncRenewCert(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::Cert>>(PrepareAsyncRenewCertRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCert(::grpc::ClientContext* context, const ::auth::Request* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::CertStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenewCert(::grpc::ClientContext* context, const ::auth::Cert* request, ::auth::Cert* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::auth::Cert>* AsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Cert>* PrepareAsyncGetCertRaw(::grpc::ClientContext* context, const ::auth::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>* AsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::CertStatus>* PrepareAsyncVerifCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Cert>* AsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::Cert>* PrepareAsyncRenewCertRaw(::grpc::ClientContext* context, const ::auth::Cert& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCert_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifCert_;
    const ::grpc::internal::RpcMethod rpcmethod_RenewCert_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCert(::grpc::ServerContext* context, const ::auth::Request* request, ::auth::Cert* response);
    virtual ::grpc::Status VerifCert(::grpc::ServerContext* context, const ::auth::Cert* request, ::auth::CertStatus* response);
    virtual ::grpc::Status RenewCert(::grpc::ServerContext* context, const ::auth::Cert* request, ::auth::Cert* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCert() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCert(::grpc::ServerContext* context, ::auth::Request* request, ::grpc::ServerAsyncResponseWriter< ::auth::Cert>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifCert() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifCert(::grpc::ServerContext* context, ::auth::Cert* request, ::grpc::ServerAsyncResponseWriter< ::auth::CertStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenewCert() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewCert(::grpc::ServerContext* context, ::auth::Cert* request, ::grpc::ServerAsyncResponseWriter< ::auth::Cert>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCert<WithAsyncMethod_VerifCert<WithAsyncMethod_RenewCert<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::auth::Request, ::auth::Cert>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auth::Request* request, ::auth::Cert* response) { return this->GetCert(context, request, response); }));}
    void SetMessageAllocatorFor_GetCert(
        ::grpc::experimental::MessageAllocator< ::auth::Request, ::auth::Cert>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::auth::Request, ::auth::Cert>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCert(
      ::grpc::CallbackServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VerifCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::auth::Cert, ::auth::CertStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auth::Cert* request, ::auth::CertStatus* response) { return this->VerifCert(context, request, response); }));}
    void SetMessageAllocatorFor_VerifCert(
        ::grpc::experimental::MessageAllocator< ::auth::Cert, ::auth::CertStatus>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::auth::Cert, ::auth::CertStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifCert(
      ::grpc::CallbackServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RenewCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::auth::Cert, ::auth::Cert>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::auth::Cert* request, ::auth::Cert* response) { return this->RenewCert(context, request, response); }));}
    void SetMessageAllocatorFor_RenewCert(
        ::grpc::experimental::MessageAllocator< ::auth::Cert, ::auth::Cert>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::auth::Cert, ::auth::Cert>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenewCert(
      ::grpc::CallbackServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenewCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetCert<ExperimentalWithCallbackMethod_VerifCert<ExperimentalWithCallbackMethod_RenewCert<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetCert<ExperimentalWithCallbackMethod_VerifCert<ExperimentalWithCallbackMethod_RenewCert<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCert() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifCert() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenewCert() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCert() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifCert() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifCert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenewCert() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewCert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCert(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifCert(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifCert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RenewCert() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenewCert(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenewCert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenewCert(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCert() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auth::Request, ::auth::Cert>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::auth::Request, ::auth::Cert>* streamer) {
                       return this->StreamedGetCert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCert(::grpc::ServerContext* /*context*/, const ::auth::Request* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::Request,::auth::Cert>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifCert() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auth::Cert, ::auth::CertStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::auth::Cert, ::auth::CertStatus>* streamer) {
                       return this->StreamedVerifCert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::CertStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifCert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::Cert,::auth::CertStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenewCert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenewCert() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::auth::Cert, ::auth::Cert>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::auth::Cert, ::auth::Cert>* streamer) {
                       return this->StreamedRenewCert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenewCert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenewCert(::grpc::ServerContext* /*context*/, const ::auth::Cert* /*request*/, ::auth::Cert* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenewCert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::Cert,::auth::Cert>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCert<WithStreamedUnaryMethod_VerifCert<WithStreamedUnaryMethod_RenewCert<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCert<WithStreamedUnaryMethod_VerifCert<WithStreamedUnaryMethod_RenewCert<Service > > > StreamedService;
};

}  // namespace auth


#endif  // GRPC_pb_2fauth_2fauth_2eproto__INCLUDED
